name: CI

on:
  pull_request: {}
  merge_group: { types: [checks_requested] }
  push: { branches: [master] }

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        # prettier-ignore
        target:
          - { name: Linux, os: ubuntu-latest, triple: x86_64-unknown-linux-gnu }
          - { name: macOS, os: macos-latest, triple: x86_64-apple-darwin }
          - { name: Windows, os: windows-latest, triple: x86_64-pc-windows-msvc }
          - { name: Windows (MinGW), os: windows-latest, triple: x86_64-pc-windows-gnu }
          - { name: Windows (32-bit), os: windows-latest, triple: i686-pc-windows-msvc }
        version:
          - { name: msrv, version: 1.65.0 }
          - { name: stable, version: stable }

    name: ${{ matrix.target.name }} / ${{ matrix.version.name }}
    runs-on: ${{ matrix.target.os }}

    env: {}

    steps:
      - name: Setup Routing
        if: matrix.target.os == 'macos-latest'
        run: sudo ifconfig lo0 alias 127.0.0.3

      - uses: actions/checkout@v4

      - name: Free Disk Space
        if: matrix.target.os == 'ubuntu-latest'
        run: ./scripts/free-disk-space.sh

      - name: Install OpenSSL
        if: matrix.target.os == 'windows-latest'
        shell: bash
        run: |
          set -e
          choco install openssl --version=1.1.1.2100 -y --no-progress
          echo 'OPENSSL_DIR=C:\Program Files\OpenSSL' >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Install Rust (${{ matrix.version.name }})
        uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          toolchain: ${{ matrix.version.version }}

      - name: Install cargo-hack and cargo-ci-cache-clean
        uses: taiki-e/install-action@v2.28.1
        with:
          tool: cargo-hack,cargo-ci-cache-clean

      - name: Generate Cargo.lock
        run: cargo generate-lockfile

      - name: workaround MSRV issues
        if: matrix.version.name == 'msrv'
        run: |
          cargo update -p=ahash --precise=0.8.7
          cargo update -p=ciborium --precise=0.2.1
          cargo update -p=ciborium-ll --precise=0.2.1
          cargo update -p=time --precise=0.3.16
          cargo update -p=clap --precise=4.3.24
          cargo update -p=clap_lex --precise=0.5.0
          cargo update -p=anstyle --precise=1.0.2

      - name: check lib
        if: >
          matrix.target.os != 'ubuntu-latest'
          && matrix.target.triple != 'x86_64-pc-windows-gnu'
        run: cargo ci-check-lib
      - name: check lib
        if: matrix.target.os == 'ubuntu-latest'
        run: cargo ci-check-lib-linux
      - name: check lib
        if: matrix.target.triple == 'x86_64-pc-windows-gnu'
        run: cargo ci-check-min

      - name: check full
        # TODO: compile OpenSSL and run tests on MinGW
        if: >
          matrix.target.os != 'ubuntu-latest'
          && matrix.target.triple != 'x86_64-pc-windows-gnu'
        run: cargo ci-check
      - name: check all
        if: matrix.target.os == 'ubuntu-latest'
        run: cargo ci-check-linux

      - name: tests
        if: matrix.target.os == 'macos-latest'
        run: cargo ci-test
      - name: tests
        if: >
          matrix.target.os == 'windows-latest'
          && matrix.target.triple != 'x86_64-pc-windows-gnu'
        run: cargo ci-test-win
      - name: tests
        if: matrix.target.os == 'ubuntu-latest'
        run: >-
          sudo bash -c "
          ulimit -Sl 512
          && ulimit -Hl 512
          && PATH=$PATH:/usr/share/rust/.cargo/bin
          && RUSTUP_TOOLCHAIN=${{ matrix.version.version }} cargo ci-test-rustls-020
          && RUSTUP_TOOLCHAIN=${{ matrix.version.version }} cargo ci-test-rustls-021
          && RUSTUP_TOOLCHAIN=${{ matrix.version.version }} cargo ci-test-linux
          "

      - name: CI cache clean
        run: cargo-ci-cache-clean

  rustdoc:
    name: rustdoc
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (nightly)
        uses: actions-rust-lang/setup-rust-toolchain@v1.8.0
        with:
          toolchain: nightly

      - name: doc tests io-uring
        run: |
          sudo bash -c "ulimit -Sl 512 && ulimit -Hl 512 && PATH=$PATH:/usr/share/rust/.cargo/bin && RUSTUP_TOOLCHAIN=nightly cargo ci-doctest"
