searchState.loadedDescShard("actix_service", 0, "See <code>Service</code> docs for information on this crate’s …\nApply a <code>Transform</code> to a <code>Service</code>.\nService factory configuration.\nErrors produced by the service.\nErrors produced by the service when polling readiness or …\nErrors produced by the created services.\nThe future response value.\nThe future response value.\nThe future of the <code>Service</code> instance.g\nErrors produced while building a transform service.\nErrors potentially raised while building a service.\nTrait for types that can be converted to a <code>Service</code>\nTrait for types that can be converted to a <code>ServiceFactory</code>\nResponses produced by the service.\nResponses given by the service.\nResponses given by the created services.\nAn asynchronous operation from <code>Request</code> to a <code>Response</code>.\nThe kind of <code>Service</code> created by this factory.\nAn extension trait for <code>Service</code>s that provides a variety of …\nFactory for creating <code>Service</code>s.\nAn extension trait for <code>ServiceFactory</code>s that provides a …\nDefines the interface of a service factory that wraps …\nThe <code>TransformService</code> value created by this factory\nAn extension trait for <code>Transform</code>s that provides a variety …\nAn implementation of <code>poll_ready</code> that always signals …\nCall another service after call to this one has resolved …\nCall another service after call to this one has resolved …\nCall another service after call to this one has resolved …\nCall another service after call to this one has resolved …\nApply a <code>Transform</code> to a <code>Service</code>.\nConvert <code>Fn(Config, &amp;Service1) -&gt; Future&lt;Service2&gt;</code> fn to a …\nConvert …\nApply transform function to a service.\nService factory that produces <code>apply_fn</code> service.\nTrait object forms of services and service factories.\nProcess the request and return the response asynchronously.\nCreate <code>ServiceFactory</code> for function that can produce …\nCreate <code>ServiceFactory</code> for function that accepts config …\nCreate <code>ServiceFactory</code> for function that can act as a …\nAn implementation of <code>poll_ready</code> that forwards readiness …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert <code>Self</code> to a <code>ServiceFactory</code>\nConvert object of type <code>U</code> to a service <code>S</code>\nConvert to a <code>Service</code>\nMap this service’s output to a different type, returning …\nMap this service’s output to a different type, returning …\nMap this service’s output to a different type, returning …\nMap this service’s output to a different type, returning …\nAdapt external config argument to a config for provided …\nMap this service’s error to a different error, returning …\nMap this service’s error to a different error, returning …\nMap this service’s error to a different error, returning …\nMap this service’s error to a different error, returning …\nMap this factory’s init error to a different error, …\nMap this factory’s init error to a different error, …\nReturn a new <code>Transform</code> whose init error is mapped to to a …\nReturn a new <code>Transform</code> whose init error is mapped to to a …\nCreate and return a new service asynchronously.\nCreates and returns a new Transform component, …\nReturns <code>Ready</code> when the service is able to process requests.\nReplace config with unit.\nA boxed future with no send bound or lifetime parameters.\nType alias for service trait object using <code>Box</code>.\nWrapper for a service factory that will map it’s …\nType alias for service trait object using <code>Rc</code>.\nWraps a service factory that returns service trait objects.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWraps service as a trait object using <code>RcService</code>.\nWraps service as a trait object using <code>BoxService</code>.")