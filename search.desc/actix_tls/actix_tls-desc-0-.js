searchState.loadedDescShard("actix_tls", 0, "TLS acceptor and connector services for the Actix …\nTLS connection acceptor services.\nTCP and TLS connector services.\nWraps service errors.\nTLS handshake has timed-out.\nWraps TLS service errors.\nTLS handshake error, TLS timeout, or inner service error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCasts the infallible service error type returned from …\nSets the maximum per-worker concurrent TLS connection …\n<code>native-tls</code> based TLS connection acceptor service.\n<code>openssl</code> based TLS acceptor service.\n<code>rustls</code> v0.20 based TLS connection acceptor service.\n<code>rustls</code> v0.21 based TLS connection acceptor service.\n<code>rustls</code> v0.22 based TLS connection acceptor service.\n<code>rustls</code> v0.23 based TLS connection acceptor service.\nAccept TLS connections via the <code>native-tls</code> crate.\nNative-TLS based acceptor service.\nWraps a <code>native-tls</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs <code>native-tls</code> based acceptor service factory.\nRe-exports from <code>native-tls</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nAn error returned from the TLS implementation.\nA wrapper around a <code>native_tls::TlsAcceptor</code>, providing an …\nAccepts a new client connection with the provided stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccept TLS connections via the <code>openssl</code> crate.\nOpenSSL based acceptor service.\nWraps an <code>openssl</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>openssl</code> based acceptor service factory.\nRe-exports from <code>openssl</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nTerminate the handshake with a fatal alert.\nAn error returned from an ALPN selection callback.\nAn SSL error.\nThe handshake failed.\nAn error or intermediate state after a TLS handshake …\nDo not select a protocol, but continue the handshake.\nSetup failed.\nThe state of an SSL/TLS session.\nA type which wraps server-side streams in a TLS session.\nA builder for <code>SslAcceptor</code>s.\nThe handshake encountered a <code>WouldBlock</code> error midway …\nInitiates a server-side TLS session on a stream.\nInitiates a server-side TLS handshake.\nConsumes the builder, returning a <code>SslAcceptor</code>.\nInitiates a client-side TLS handshake.\nReturns a shared reference to the inner raw <code>SslContext</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>SslAcceptor</code>, returning the inner raw …\nCreates a new builder configured to connect to non-legacy …\nCreates a new builder configured to connect to non-legacy …\nCreates a new builder configured to connect to modern …\nCreates a new builder configured to connect to modern …\nCreates a new <code>Ssl</code>.\nReturns a new extra data index.\nAccept TLS connections via the <code>rustls</code> crate.\nRustls based acceptor service.\nWraps a <code>rustls</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs <code>rustls</code> based acceptor service factory.\nRe-exports from <code>rustls</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nCommon configuration for a set of server sessions.\nProtocol names we support, most preferred first. If empty …\nCreate builder to build up the server configuration.\nHow to choose a server cert and key.\nReturns the argument unchanged.\nIgnore the client’s ciphersuite order. Instead, choose …\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nAmount of early data to accept for sessions created by …\nThe maximum size of TLS message we’ll emit.  If None, we …\nWhether the server should send “0.5RTT” data.  This …\nHow to store client sessions.\nHow to produce tickets.\nAccept TLS connections via the <code>rustls</code> crate.\nRustls based acceptor service.\nWraps a <code>rustls</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs <code>rustls</code> based acceptor service factory.\nRe-exports from <code>rustls</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nCommon configuration for a set of server sessions.\nProtocol names we support, most preferred first. If empty …\nCreate builder to build up the server configuration.\nHow to choose a server cert and key.\nReturns the argument unchanged.\nIgnore the client’s ciphersuite order. Instead, choose …\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nAmount of early data to accept for sessions created by …\nThe maximum size of TLS message we’ll emit.  If None, we …\nWhether the server should send “0.5RTT” data.  This …\nHow many TLS1.3 tickets to send immediately after a …\nHow to store client sessions.\nHow to produce tickets.\nAccept TLS connections via the <code>rustls</code> crate.\nRustls based acceptor service.\nWraps a <code>rustls</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs <code>rustls</code> based acceptor service factory.\nRe-exports from <code>rustls</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nCommon configuration for a set of server sessions.\nProtocol names we support, most preferred first. If empty …\nCreate a builder for a server configuration with the …\nCreate a builder for a server configuration with the …\nCreate a builder for a server configuration with a …\nHow to choose a server cert and key. This is usually set by\nAllows traffic secrets to be extracted after the handshake,\nReturns the argument unchanged.\nIgnore the client’s ciphersuite order. Instead, choose …\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nAmount of early data to accept for sessions created by …\nThe maximum size of plaintext input to be emitted in a …\nWhether the server should send “0.5RTT” data.  This …\nHow many TLS1.3 tickets to send immediately after a …\nHow to store client sessions.\nHow to produce tickets.\nAccept TLS connections via the <code>rustls</code> crate.\nRustls based acceptor service.\nWraps a <code>rustls</code> based async TLS stream in order to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs <code>rustls</code> based acceptor service factory.\nRe-exports from <code>rustls</code> that are useful for acceptors.\nLimit the amount of time that the acceptor will wait for a …\nCommon configuration for a set of server sessions.\nProtocol names we support, most preferred first. If empty …\nCreate a builder for a server configuration with the …\nCreate a builder for a server configuration with no …\nCreate a builder for a server configuration with the …\nCreate a builder for a server configuration with a …\nCaching for compressed certificates.\nHow to compress the server’s certificate chain.\nHow to decompress the clients’s certificate chain.\nHow to choose a server cert and key. This is usually set by\nReturn the crypto provider used to construct this client …\nAllows traffic secrets to be extracted after the handshake,\nReturn <code>true</code> if connections made with this <code>ServerConfig</code> will\nReturns the argument unchanged.\nIgnore the client’s ciphersuite order. Instead, choose …\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nAmount of early data to accept for sessions created by …\nThe maximum size of plaintext input to be emitted in a …\nWhether the server should send “0.5RTT” data.  This …\nHow many TLS1.3 tickets to send immediately after a …\nHow to store client sessions.\nHow to produce tickets.\nProvides the current system time\nErrors that can result from using a connector service.\nConnection request information.\nWraps underlying I/O and the connection request that …\nCombined resolver and TCP connector service factory.\nCombined resolver and TCP connector service.\nAn interface for types where host parts (hostname and …\nInvalid input.\nConnection IO error.\nNo DNS records.\nCustom async DNS resolvers.\nDNS resolver service factory.\nFailed to resolve the hostname.\nDNS resolver service.\nUnresolved host name.\nGet borrowed iterator of resolved request addresses.\nConstructs a new resolver factory with a custom resolver.\nConstructor for custom Resolve trait object and use it as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract hostname.\nReturns hostname.\nReturns request hostname.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs into IO and request parts.\nReturns a mutable reference to the underlying IO.\nReturns a shared reference to the underlying IO.\nGiven DNS lookup information, returns a future that …\nNative-TLS based connector service.\nConstruct new <code>Connection</code> from request and IO parts.\nConstructs new connector factory with the given resolver.\nConstructs new connection info using a request.\nOpenSSL based connector service.\nExtract optional port.\nExtract optional port.\nReturns request port.\nReplaces underlying IO, returning old IO and new <code>Connection</code>…\nReturns a reference to the connection request.\nReturns a reference to the connection request.\nRustls based connector service.\nRustls based connector service.\nRustls based connector service.\nRustls based connector service.\nBuild connector service.\nReturns a new resolver service.\nSet connection socket address.\nSet list of addresses.\nSet local address to connection with.\nSet connection port.\nTake owned iterator resolved request addresses.\nTCP connector service.\nConstructs new connection info from request and known …\nConnector service and factory using <code>native-tls</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs new connector service from a <code>native-tls</code> …\nRe-exports from <code>native-tls</code> and <code>tokio-native-tls</code> that are …\nA wrapper around an underlying raw stream which implements …\nA builder for client-side TLS connections.\nReturns a new builder for a <code>TlsConnector</code>.\nInitiates a TLS handshake.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the inner stream.\nReturns a shared reference to the inner stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new connector with default settings.\nConnector service factory using <code>openssl</code>.\nConnector service using <code>openssl</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs new connector service factory from an <code>openssl</code> …\nRe-exports from <code>openssl</code> and <code>tokio-openssl</code> that are useful …\nConstructs new connector service from an <code>openssl</code> connector.\nAn asynchronous version of <code>openssl::ssl::SslStream</code>.\nAn SSL error.\nThe handshake failed.\nAn error or intermediate state after a TLS handshake …\nSetup failed.\nA type which wraps client-side streams in a TLS session.\nA builder for <code>SslConnector</code>s.\nA type specifying the kind of protocol an <code>SslContext</code> will …\nThe handshake encountered a <code>WouldBlock</code> error midway …\nA convenience method wrapping <code>poll_accept</code>.\nReturns a pointer to the underlying OpenSSL value.\nConsumes the builder, returning an <code>SslConnector</code>.\nCreates a new builder for TLS connections.\nReturns a structure allowing for configuration of a single …\nA convenience method wrapping <code>poll_connect</code>.\nInitiates a client-side TLS session on a stream.\nReturns a shared reference to the inner raw <code>SslContext</code>.\nA convenience method wrapping <code>poll_do_handshake</code>.\nSupport all versions of the DTLS protocol.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an <code>SslMethod</code> from a pointer to the underlying …\nReturns a mutable reference to the underlying stream.\nReturns a pinned mutable reference to the underlying …\nReturns a shared reference to the underlying stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>SslConnector</code>, returning the inner raw …\nLike <code>SslStream::new</code>.\nA convenience method wrapping <code>poll_peek</code>.\nLike <code>SslStream::accept</code>.\nLike <code>SslStream::connect</code>.\nLike <code>SslStream::do_handshake</code>.\nLike <code>SslStream::ssl_peek</code>.\nLike <code>SslStream::read_early_data</code>.\nLike <code>SslStream::write_early_data</code>.\nA convenience method wrapping <code>poll_read_early_data</code>.\nReturns a shared reference to the <code>Ssl</code> object associated …\nSupport all versions of the TLS protocol.\nSupport all versions of the TLS protocol, explicitly as a …\nSupport all versions of the TLS protocol, explicitly as a …\nA convenience method wrapping <code>poll_write_early_data</code>.\nConnector service factory using <code>rustls</code>.\nConnector service using <code>rustls</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns root certificates via <code>rustls-native-certs</code> crate as …\nConstructs new connector service factory from a <code>rustls</code> …\nRe-exports from the <code>rustls</code> v0.20 ecosystem that are useful …\nConstructs new connector service from a <code>rustls</code> client …\nReturns standard root certificates from <code>webpki-roots</code> crate …\nA wrapper around an underlying raw stream which implements …\nCommon configuration for (typically) all connections made …\nWhich ALPN protocols we include in our client hello. If …\nCreate a builder to build up the client configuration.\nHow to decide what client auth certificate/keys to use.\nWhether to send data on the first flight (“early data”…\nWhether to send the Server Name Indication (SNI) extension …\nWhether to support RFC5077 tickets.  You must provide a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nThe maximum size of TLS message we’ll emit.  If None, we …\nNote: that it does not guarantee the final data to be sent.\nHow we store session data or tickets.\nConnector service factory using <code>rustls</code>.\nConnector service using <code>rustls</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns root certificates via <code>rustls-native-certs</code> crate as …\nConstructs new connector service factory from a <code>rustls</code> …\nRe-exports from the <code>rustls</code> v0.21 ecosystem that are useful …\nConstructs new connector service from a <code>rustls</code> client …\nReturns standard root certificates from <code>webpki-roots</code> crate …\nA wrapper around an underlying raw stream which implements …\nCommon configuration for (typically) all connections made …\nWhich ALPN protocols we include in our client hello. If …\nCreate a builder to build up the client configuration.\nHow to decide what client auth certificate/keys to use.\nWhether to send data on the first flight (“early data”…\nWhether to send the Server Name Indication (SNI) extension …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nThe maximum size of TLS message we’ll emit.  If None, we …\nNote: that it does not guarantee the final data to be sent.\nHow and when the client can resume a previous session.\nConnector service factory using <code>rustls</code>.\nConnector service using <code>rustls</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns root certificates via <code>rustls-native-certs</code> crate as …\nConstructs new connector service factory from a <code>rustls</code> …\nRe-exports from the <code>rustls</code> v0.22 ecosystem that are useful …\nConstructs new connector service from a <code>rustls</code> client …\nReturns standard root certificates from <code>webpki-roots</code> crate …\nA wrapper around an underlying raw stream which implements …\nCommon configuration for (typically) all connections made …\nWhich ALPN protocols we include in our client hello. If …\nCreate a builder for a client configuration with the …\nCreate a builder for a client configuration with the …\nCreate a builder for a client configuration with a …\nHow to decide what client auth certificate/keys to use.\nAccess configuration options whose use is dangerous and …\nWhether to send data on the first flight (“early data”…\nAllows traffic secrets to be extracted after the handshake,\nWhether to send the Server Name Indication (SNI) extension …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nThe maximum size of plaintext input to be emitted in a …\nNote: that it does not guarantee the final data to be sent.\nHow and when the client can resume a previous session.\nConnector service factory using <code>rustls</code>.\nConnector service using <code>rustls</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns root certificates via <code>rustls-native-certs</code> crate as …\nConstructs new connector service factory from a <code>rustls</code> …\nRe-exports from the <code>rustls</code> v0.23 ecosystem that are useful …\nConstructs new connector service from a <code>rustls</code> client …\nReturns standard root certificates from <code>webpki-roots</code> crate …\nA wrapper around an underlying raw stream which implements …\nCommon configuration for (typically) all connections made …\nWhich ALPN protocols we include in our client hello. If …\nCreate a builder for a client configuration with the …\nCreate a builder for a client configuration with no …\nCreate a builder for a client configuration with the …\nCreate a builder for a client configuration with a …\nCaching for compressed certificates.\nHow to compress the client’s certificate chain.\nHow to decompress the server’s certificate chain.\nHow to decide what client auth certificate/keys to use.\nReturn the crypto provider used to construct this client …\nAccess configuration options whose use is dangerous and …\nWhether to send data on the first flight (“early data”…\nAllows traffic secrets to be extracted after the handshake,\nWhether to send the Server Name Indication (SNI) extension …\nReturn true if connections made with this <code>ClientConfig</code> will\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow to output key material for debugging.  The default …\nThe maximum size of plaintext input to be emitted in a …\nNote: that it does not guarantee the final data to be sent.\nNote: that it does not guarantee the final data to be sent.\nHow and when the client can resume a previous session.\nProvides the current system time\nTCP connector service factory.\nTCP connector service.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new TCP connector service.")