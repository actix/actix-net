searchState.loadedDescShard("actix_utils", 0, "Various utilities used in the Actix ecosystem.\nTask-notifying counter.\nHelpers for constructing futures.\nSimple counter with ability to notify task on reaching …\nAn RAII structure that keeps the underlying counter …\nReturns true if counter is below capacity. Otherwise, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new counter guard, incrementing the counter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>Counter</code> instance with max value.\nGet total number of acquired guards.\nCombines two different futures that have the same output …\nA value of type <code>L</code>.\nFuture for the <code>poll_fn</code> function.\nFuture for the <code>ready</code> function.\nA value of type <code>R</code>.\nCreates a future that is immediately ready with an error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps into inner value when left and right have a common …\nUnwraps the value from this immediately ready future.\nCreates new <code>Either</code> using left variant.\nCreates a future that is immediately ready with a success …\nCreates a future driven by the provided function that …\nCreates a future that is immediately ready with a value.\nCreates new <code>Either</code> using right variant.")