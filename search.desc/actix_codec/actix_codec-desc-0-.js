searchState.loadedDescShard("actix_codec", 0, "Codec utilities for working with framed protocols.\nReads bytes from a source.\nWrites bytes asynchronously.\nBytes codec. Reads/writes chunks of bytes from a stream.\nDecoding of frames via buffers.\nTrait of helper objects to write out messages as bytes, …\nThe type of unrecoverable frame decoding errors.\nThe type of encoding errors.\nA unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …\n<code>FramedParts</code> contains an export of the data of a Framed …\nThe type of decoded frames.\nLines codec. Reads/writes line delimited strings.\nA wrapper around a byte buffer that is incrementally …\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns the total capacity of the buffer.\nClears the buffer, resetting the filled region to empty.\nFlush write buffer and shutdown underlying I/O stream.\nThe codec object.\nReturns a mutable reference to the underlying codec.\nReturns a reference to the underlying codec.\nAttempts to decode a frame from the provided buffer of …\nA default method available to be called when there are no …\nEncodes a frame into the buffer provided.\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nFlush write buffer to underlying I/O stream.\nProvides a <code>Stream</code> and <code>Sink</code> interface for reading and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function returns a <em>single</em> object that is both <code>Stream</code> …\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>Frame</code>, returning <code>Frame</code> with different codec.\nConsume the <code>Frame</code>, returning <code>Frame</code> with different io.\nConsumes the <code>Frame</code>, returning its underlying I/O stream, …\nThe inner transport used to read bytes to and write bytes …\nReturns a mutable reference to the underlying I/O stream.\nReturns a <code>Pin</code> of a mutable reference to the underlying I/O …\nReturns a reference to the underlying I/O stream wrapped …\nCheck if read buffer is empty.\nCheck if write buffer is empty.\nCheck if write buffer is full.\nCheck if framed is able to write more data.\nDetermines if this writer has an efficient …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nThis function returns a <em>single</em> object that is both <code>Stream</code> …\nCreates a new default <code>FramedParts</code>.\nTry to read underlying I/O stream and decode item.\nAttempts to flush the object, ensuring that any buffered …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nTry to read data from an <code>AsyncRead</code> into an implementer of …\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nThe buffer with read but unprocessed data.\nReturns the number of bytes at the end of the slice that …\nConsume the <code>Frame</code>, returning <code>Frame</code> with different codec.\nSets the size of the filled region of the buffer.\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a fully uninitialized buffer.\nCreates a new <code>FramedParts</code> with read buffer.\nSerialize item and write to the inner buffer\nA buffer with unprocessed data which are not written yet.")